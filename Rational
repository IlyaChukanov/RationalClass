#include <iostream>
#include <map>
#include <set>
#include <vector>
using namespace std;

int gcd(int a, int b) {
    while (b != 0) {
        int c = b;
        b = a % b;
        a = c;
    }
    return a;
}

class Rational {
 public:
    Rational() {
        num1 = 0;
        den1 = 1;
    }
    Rational(int numerator, int denominator) {
        if (denominator == 0) throw invalid_argument("invalid_argument");
        int rez = gcd(numerator, denominator);
        num1 = numerator / rez;
        den1 = denominator / rez;
        if (num1 == 0)
            denominator = 1;
        else if ((num1 >= 0 && den1 < 0) || (num1 < 0 && den1 < 0)) {
            num1 *= -1;
            den1 *= -1;
        }
    }

    int Numerator() const { return num1; }

    int Denominator() const { return den1; }

 private:
    int num1;
    int den1;
};

bool operator==(Rational a, Rational b) {
    if (b.Numerator() == a.Numerator() && b.Denominator() == a.Denominator()) {
        return true;
    }
    return false;
}

Rational operator-(Rational a, Rational b) {
    int num2 =
        (a.Numerator() * b.Denominator()) - (b.Numerator() * a.Denominator());
    int den2 = a.Denominator() * b.Denominator();
    Rational ans = Rational(num2, den2);
    return ans;
}

Rational operator+(Rational a, Rational b) {
    int num2 =
        (a.Numerator() * b.Denominator()) + (b.Numerator() * a.Denominator());
    int den2 = a.Denominator() * b.Denominator();
    Rational ans = Rational(num2, den2);
    return ans;
}

Rational operator*(Rational a, Rational b) {
    Rational ans = Rational((a.Numerator() * b.Numerator()),
                            (a.Denominator() * b.Denominator()));
    return ans;
}
Rational operator/(Rational a, Rational b) {
    if (b.Numerator() == 0) throw domain_error("domain_error");
    Rational ans = Rational((a.Numerator() * b.Denominator()),
                            (a.Denominator() * b.Numerator()));
    return ans;
}
istream& operator>>(istream& stream, Rational& elem) {
    int num2;
    int den2;
    if (stream >> num2 && stream.ignore(1) && stream >> den2) {
        elem = {num2, den2};
    }
    return stream;
}

ostream& operator<<(ostream& stream, const Rational& elem) {
    stream << elem.Numerator();
    stream << '/';
    stream << elem.Denominator();
    return stream;
}

bool operator<(Rational a, Rational b) {
    if ((double)a.Numerator() / (double)a.Denominator() <
        (double)b.Numerator() / (double)b.Denominator()) {
        return true;
    }
    return false;
}

bool operator>(Rational a, Rational b) {
    if ((double)a.Numerator() / (double)a.Denominator() >
        (double)b.Numerator() / (double)b.Denominator()) {
        return true;
    }
    return false;
}

int main() {
    try {
        Rational r(1, 0);
        cout << "Doesn't throw in case of zero denominator" << endl;
        return 1;
    } catch (invalid_argument&) {
    }

    try {
        auto x = Rational(1, 2) / Rational(0, 1);
        cout << "Doesn't throw in case of division by zero" << endl;
        return 2;
    } catch (domain_error&) {
    }

    cout << "OK" << endl;
    return 0;
}
